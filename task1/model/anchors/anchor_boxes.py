import numpy as np


def generate_basic_anchors(anchor_heights: list, anchor_scale: int):
    """
    Generate the basic anchor boxes (their relative coordinates) based on the provided anchor heights.
    
    Args:
        anchor_heights: A list containing the height of the anchor boxes.
        anchor_scale: The scale of each anchor.

    Returns:
        A numpy array whose shape is [len(anchor_heights), 4] and contains the coordinates of the basic anchor boxes.
        
    """
    basic_anchor = np.array([0, 0, anchor_scale - 1, anchor_scale - 1], np.int32)
    
    heights = np.array(anchor_heights, dtype=np.int32)
    widths = np.ones(len(heights), dtype=np.int32) * anchor_scale
    
    sizes = np.column_stack((heights, widths))
    
    basic_anchors = np.apply_along_axis(func1d=scale_anchor, axis=1, arr=sizes, basic_anchor=basic_anchor)
    
    return basic_anchors


def scale_anchor(shape, basic_anchor):
    """
    Scale anchor boxes based on the widths and heights.
    
    Args:
        shape: A numpy array containing the shape of the anchor box.
        basic_anchor: A numpy array containing the coordinates of the anchor box.

    Returns:
        A numpy array containing the coordinates of the anchor box.

    """
    
    h, w = shape
    
    cx = (basic_anchor[0] + basic_anchor[2]) / 2.
    cy = (basic_anchor[1] + basic_anchor[3]) / 2.
    
    scaled_anchor = basic_anchor.copy()
    
    scaled_anchor[0] = cx - w / 2.  # xmin
    scaled_anchor[1] = cy - h / 2.  # ymin
    scaled_anchor[2] = cx + w / 2.  # xmax
    scaled_anchor[3] = cy + h / 2.  # ymax
    
    return scaled_anchor


def generate_all_anchor_boxes(feature_map_size: list, feat_stride: int, anchor_heights: list, anchor_scale: int):
    """
    Generate all anchors corresponding to a feature map generated by a CNN network.
    
    Args:
        feature_map_size: A list containing the size of the feature map.
        feat_stride: The stride of the feature map.
        anchor_heights: A list containing the height of the anchor boxes.
        anchor_scale: The scale of each anchor.

    Returns:
        A numpy array whose shape is [#anchors, 4] and contains the coordinates of the generated anchor boxes.
        
    """
    
    # Generate basic anchor boxes
    basic_anchors = generate_basic_anchors(anchor_heights, anchor_scale)
    n_anchors = basic_anchors.shape[0]
    
    feat_map_h, feat_map_w = feature_map_size
    
    all_anchors = np.zeros(shape=(n_anchors * feat_map_h * feat_map_w, 4), dtype=np.int32)
    
    # Compute and return all anchor boxes on the feature maps
    index = 0
    for y in range(feat_map_h):
        for x in range(feat_map_w):
            shift = np.array([x, y, x, y]) * feat_stride
            all_anchors[index:index + n_anchors, :] = basic_anchors + shift
            index += n_anchors
    
    return all_anchors
